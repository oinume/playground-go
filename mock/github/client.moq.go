// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package github

import (
	"context"
	"sync"
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
//	func TestSomethingThatUsesClient(t *testing.T) {
//
//		// make and configure a mocked Client
//		mockedClient := &ClientMock{
//			BarFunc: func() error {
//				panic("mock out the Bar method")
//			},
//			FooFunc: func() error {
//				panic("mock out the Foo method")
//			},
//			ListBranchesFunc: func(ctx context.Context, owner string, repo string) ([]string, error) {
//				panic("mock out the ListBranches method")
//			},
//		}
//
//		// use mockedClient in code that requires Client
//		// and then make assertions.
//
//	}
type ClientMock struct {
	// BarFunc mocks the Bar method.
	BarFunc func() error

	// FooFunc mocks the Foo method.
	FooFunc func() error

	// ListBranchesFunc mocks the ListBranches method.
	ListBranchesFunc func(ctx context.Context, owner string, repo string) ([]string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Bar holds details about calls to the Bar method.
		Bar []struct {
		}
		// Foo holds details about calls to the Foo method.
		Foo []struct {
		}
		// ListBranches holds details about calls to the ListBranches method.
		ListBranches []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Owner is the owner argument value.
			Owner string
			// Repo is the repo argument value.
			Repo string
		}
	}
	lockBar          sync.RWMutex
	lockFoo          sync.RWMutex
	lockListBranches sync.RWMutex
}

// Bar calls BarFunc.
func (mock *ClientMock) Bar() error {
	if mock.BarFunc == nil {
		panic("ClientMock.BarFunc: method is nil but Client.Bar was just called")
	}
	callInfo := struct {
	}{}
	mock.lockBar.Lock()
	mock.calls.Bar = append(mock.calls.Bar, callInfo)
	mock.lockBar.Unlock()
	return mock.BarFunc()
}

// BarCalls gets all the calls that were made to Bar.
// Check the length with:
//
//	len(mockedClient.BarCalls())
func (mock *ClientMock) BarCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockBar.RLock()
	calls = mock.calls.Bar
	mock.lockBar.RUnlock()
	return calls
}

// Foo calls FooFunc.
func (mock *ClientMock) Foo() error {
	if mock.FooFunc == nil {
		panic("ClientMock.FooFunc: method is nil but Client.Foo was just called")
	}
	callInfo := struct {
	}{}
	mock.lockFoo.Lock()
	mock.calls.Foo = append(mock.calls.Foo, callInfo)
	mock.lockFoo.Unlock()
	return mock.FooFunc()
}

// FooCalls gets all the calls that were made to Foo.
// Check the length with:
//
//	len(mockedClient.FooCalls())
func (mock *ClientMock) FooCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockFoo.RLock()
	calls = mock.calls.Foo
	mock.lockFoo.RUnlock()
	return calls
}

// ListBranches calls ListBranchesFunc.
func (mock *ClientMock) ListBranches(ctx context.Context, owner string, repo string) ([]string, error) {
	if mock.ListBranchesFunc == nil {
		panic("ClientMock.ListBranchesFunc: method is nil but Client.ListBranches was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Owner string
		Repo  string
	}{
		Ctx:   ctx,
		Owner: owner,
		Repo:  repo,
	}
	mock.lockListBranches.Lock()
	mock.calls.ListBranches = append(mock.calls.ListBranches, callInfo)
	mock.lockListBranches.Unlock()
	return mock.ListBranchesFunc(ctx, owner, repo)
}

// ListBranchesCalls gets all the calls that were made to ListBranches.
// Check the length with:
//
//	len(mockedClient.ListBranchesCalls())
func (mock *ClientMock) ListBranchesCalls() []struct {
	Ctx   context.Context
	Owner string
	Repo  string
} {
	var calls []struct {
		Ctx   context.Context
		Owner string
		Repo  string
	}
	mock.lockListBranches.RLock()
	calls = mock.calls.ListBranches
	mock.lockListBranches.RUnlock()
	return calls
}
